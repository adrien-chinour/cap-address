<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  CapAddress\Address
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CAP ADDRESS
 *
 * CAP ADDRESS permet, en temps réel, d'assister l'utilisateur lors de la saisie d'une adresse et de s'assurer de la validité de cette dernière avant de la stocker en base de données. Ainsi que de vérifier l'intégralité d'une adresse, en temps réel, lors de la validation.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@capadresse.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CapAddress\Address\Model;

use \ArrayAccess;
use \CapAddress\Address\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  CapAddress\Address
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'input_output' => 'string',
        'step' => 'string',
        'country_code' => 'string',
        'language_code' => 'string',
        'quality_code' => 'string',
        'extended_quality_code' => 'string',
        'locality_id' => 'string',
        'postal_code' => 'string',
        'locality' => 'string',
        'locality_synonym' => 'string',
        'locality_flags' => 'int',
        'locality_info_1' => 'string',
        'locality_info_2' => 'string',
        'locality_info_3' => 'string',
        'locality_info_4' => 'string',
        'locality_info_5' => 'string',
        'street_id' => 'string',
        'street_name' => 'string',
        'street_flags' => 'int',
        'street_type' => 'string',
        'abbreviated_street_type' => 'string',
        'street_synonym' => 'string',
        'street_info_1' => 'string',
        'street_info_2' => 'string',
        'street_info_3' => 'string',
        'street_info_4' => 'string',
        'street_info_5' => 'string',
        'street_number' => 'string',
        'street_number_id' => 'string',
        'street_number_ext' => 'string',
        'street_number_position' => 'int',
        'range' => 'string',
        'range_type' => 'string',
        'list_street_number' => 'string',
        'building_id' => 'string',
        'building_name' => 'string',
        'building_info_1' => 'string',
        'building_info_2' => 'string',
        'building_info_3' => 'string',
        'building_info_4' => 'string',
        'building_info_5' => 'string',
        'company_id' => 'string',
        'company' => 'string',
        'company_info_1' => 'string',
        'company_info_2' => 'string',
        'formatted_address' => 'string',
        'additional_info_1' => 'string',
        'additional_info_2' => 'string',
        'additional_info_3' => 'string',
        'additional_info_4' => 'string',
        'additional_info_5' => 'string',
        'additional_info_6' => 'string',
        'additional_info_7' => 'string',
        'additional_info_8' => 'string',
        'additional_info_9' => 'string',
        'additional_info_10' => 'string',
        'has_moved' => 'int',
        'xy_data_base' => 'int',
        'x' => 'string',
        'y' => 'string',
        'accuracy' => 'int',
        'id_carreau' => 'string',
        'id_inspire' => 'string',
        'id_k' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'input_output' => null,
        'step' => null,
        'country_code' => null,
        'language_code' => null,
        'quality_code' => null,
        'extended_quality_code' => null,
        'locality_id' => null,
        'postal_code' => null,
        'locality' => null,
        'locality_synonym' => null,
        'locality_flags' => 'int32',
        'locality_info_1' => null,
        'locality_info_2' => null,
        'locality_info_3' => null,
        'locality_info_4' => null,
        'locality_info_5' => null,
        'street_id' => null,
        'street_name' => null,
        'street_flags' => 'int32',
        'street_type' => null,
        'abbreviated_street_type' => null,
        'street_synonym' => null,
        'street_info_1' => null,
        'street_info_2' => null,
        'street_info_3' => null,
        'street_info_4' => null,
        'street_info_5' => null,
        'street_number' => null,
        'street_number_id' => null,
        'street_number_ext' => null,
        'street_number_position' => null,
        'range' => null,
        'range_type' => null,
        'list_street_number' => null,
        'building_id' => null,
        'building_name' => null,
        'building_info_1' => null,
        'building_info_2' => null,
        'building_info_3' => null,
        'building_info_4' => null,
        'building_info_5' => null,
        'company_id' => null,
        'company' => null,
        'company_info_1' => null,
        'company_info_2' => null,
        'formatted_address' => null,
        'additional_info_1' => null,
        'additional_info_2' => null,
        'additional_info_3' => null,
        'additional_info_4' => null,
        'additional_info_5' => null,
        'additional_info_6' => null,
        'additional_info_7' => null,
        'additional_info_8' => null,
        'additional_info_9' => null,
        'additional_info_10' => null,
        'has_moved' => 'int32',
        'xy_data_base' => 'int32',
        'x' => null,
        'y' => null,
        'accuracy' => 'int32',
        'id_carreau' => null,
        'id_inspire' => null,
        'id_k' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'input_output' => 'inputOutput',
        'step' => 'step',
        'country_code' => 'countryCode',
        'language_code' => 'languageCode',
        'quality_code' => 'qualityCode',
        'extended_quality_code' => 'extendedQualityCode',
        'locality_id' => 'localityId',
        'postal_code' => 'postalCode',
        'locality' => 'locality',
        'locality_synonym' => 'localitySynonym',
        'locality_flags' => 'localityFlags',
        'locality_info_1' => 'localityInfo_1',
        'locality_info_2' => 'localityInfo_2',
        'locality_info_3' => 'localityInfo_3',
        'locality_info_4' => 'localityInfo_4',
        'locality_info_5' => 'localityInfo_5',
        'street_id' => 'streetId',
        'street_name' => 'streetName',
        'street_flags' => 'streetFlags',
        'street_type' => 'streetType',
        'abbreviated_street_type' => 'abbreviatedStreetType',
        'street_synonym' => 'streetSynonym',
        'street_info_1' => 'streetInfo_1',
        'street_info_2' => 'streetInfo_2',
        'street_info_3' => 'streetInfo_3',
        'street_info_4' => 'streetInfo_4',
        'street_info_5' => 'streetInfo_5',
        'street_number' => 'streetNumber',
        'street_number_id' => 'streetNumberId',
        'street_number_ext' => 'streetNumberExt',
        'street_number_position' => 'streetNumberPosition',
        'range' => 'range',
        'range_type' => 'rangeType',
        'list_street_number' => 'listStreetNumber',
        'building_id' => 'buildingId',
        'building_name' => 'buildingName',
        'building_info_1' => 'buildingInfo_1',
        'building_info_2' => 'buildingInfo_2',
        'building_info_3' => 'buildingInfo_3',
        'building_info_4' => 'buildingInfo_4',
        'building_info_5' => 'buildingInfo_5',
        'company_id' => 'companyId',
        'company' => 'company',
        'company_info_1' => 'companyInfo_1',
        'company_info_2' => 'companyInfo_2',
        'formatted_address' => 'formattedAddress',
        'additional_info_1' => 'additionalInfo_1',
        'additional_info_2' => 'additionalInfo_2',
        'additional_info_3' => 'additionalInfo_3',
        'additional_info_4' => 'additionalInfo_4',
        'additional_info_5' => 'additionalInfo_5',
        'additional_info_6' => 'additionalInfo_6',
        'additional_info_7' => 'additionalInfo_7',
        'additional_info_8' => 'additionalInfo_8',
        'additional_info_9' => 'additionalInfo_9',
        'additional_info_10' => 'additionalInfo_10',
        'has_moved' => 'hasMoved',
        'xy_data_base' => 'XYDataBase',
        'x' => 'X',
        'y' => 'Y',
        'accuracy' => 'accuracy',
        'id_carreau' => 'idCarreau',
        'id_inspire' => 'idInspire',
        'id_k' => 'idK'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'input_output' => 'setInputOutput',
        'step' => 'setStep',
        'country_code' => 'setCountryCode',
        'language_code' => 'setLanguageCode',
        'quality_code' => 'setQualityCode',
        'extended_quality_code' => 'setExtendedQualityCode',
        'locality_id' => 'setLocalityId',
        'postal_code' => 'setPostalCode',
        'locality' => 'setLocality',
        'locality_synonym' => 'setLocalitySynonym',
        'locality_flags' => 'setLocalityFlags',
        'locality_info_1' => 'setLocalityInfo1',
        'locality_info_2' => 'setLocalityInfo2',
        'locality_info_3' => 'setLocalityInfo3',
        'locality_info_4' => 'setLocalityInfo4',
        'locality_info_5' => 'setLocalityInfo5',
        'street_id' => 'setStreetId',
        'street_name' => 'setStreetName',
        'street_flags' => 'setStreetFlags',
        'street_type' => 'setStreetType',
        'abbreviated_street_type' => 'setAbbreviatedStreetType',
        'street_synonym' => 'setStreetSynonym',
        'street_info_1' => 'setStreetInfo1',
        'street_info_2' => 'setStreetInfo2',
        'street_info_3' => 'setStreetInfo3',
        'street_info_4' => 'setStreetInfo4',
        'street_info_5' => 'setStreetInfo5',
        'street_number' => 'setStreetNumber',
        'street_number_id' => 'setStreetNumberId',
        'street_number_ext' => 'setStreetNumberExt',
        'street_number_position' => 'setStreetNumberPosition',
        'range' => 'setRange',
        'range_type' => 'setRangeType',
        'list_street_number' => 'setListStreetNumber',
        'building_id' => 'setBuildingId',
        'building_name' => 'setBuildingName',
        'building_info_1' => 'setBuildingInfo1',
        'building_info_2' => 'setBuildingInfo2',
        'building_info_3' => 'setBuildingInfo3',
        'building_info_4' => 'setBuildingInfo4',
        'building_info_5' => 'setBuildingInfo5',
        'company_id' => 'setCompanyId',
        'company' => 'setCompany',
        'company_info_1' => 'setCompanyInfo1',
        'company_info_2' => 'setCompanyInfo2',
        'formatted_address' => 'setFormattedAddress',
        'additional_info_1' => 'setAdditionalInfo1',
        'additional_info_2' => 'setAdditionalInfo2',
        'additional_info_3' => 'setAdditionalInfo3',
        'additional_info_4' => 'setAdditionalInfo4',
        'additional_info_5' => 'setAdditionalInfo5',
        'additional_info_6' => 'setAdditionalInfo6',
        'additional_info_7' => 'setAdditionalInfo7',
        'additional_info_8' => 'setAdditionalInfo8',
        'additional_info_9' => 'setAdditionalInfo9',
        'additional_info_10' => 'setAdditionalInfo10',
        'has_moved' => 'setHasMoved',
        'xy_data_base' => 'setXyDataBase',
        'x' => 'setX',
        'y' => 'setY',
        'accuracy' => 'setAccuracy',
        'id_carreau' => 'setIdCarreau',
        'id_inspire' => 'setIdInspire',
        'id_k' => 'setIdK'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'input_output' => 'getInputOutput',
        'step' => 'getStep',
        'country_code' => 'getCountryCode',
        'language_code' => 'getLanguageCode',
        'quality_code' => 'getQualityCode',
        'extended_quality_code' => 'getExtendedQualityCode',
        'locality_id' => 'getLocalityId',
        'postal_code' => 'getPostalCode',
        'locality' => 'getLocality',
        'locality_synonym' => 'getLocalitySynonym',
        'locality_flags' => 'getLocalityFlags',
        'locality_info_1' => 'getLocalityInfo1',
        'locality_info_2' => 'getLocalityInfo2',
        'locality_info_3' => 'getLocalityInfo3',
        'locality_info_4' => 'getLocalityInfo4',
        'locality_info_5' => 'getLocalityInfo5',
        'street_id' => 'getStreetId',
        'street_name' => 'getStreetName',
        'street_flags' => 'getStreetFlags',
        'street_type' => 'getStreetType',
        'abbreviated_street_type' => 'getAbbreviatedStreetType',
        'street_synonym' => 'getStreetSynonym',
        'street_info_1' => 'getStreetInfo1',
        'street_info_2' => 'getStreetInfo2',
        'street_info_3' => 'getStreetInfo3',
        'street_info_4' => 'getStreetInfo4',
        'street_info_5' => 'getStreetInfo5',
        'street_number' => 'getStreetNumber',
        'street_number_id' => 'getStreetNumberId',
        'street_number_ext' => 'getStreetNumberExt',
        'street_number_position' => 'getStreetNumberPosition',
        'range' => 'getRange',
        'range_type' => 'getRangeType',
        'list_street_number' => 'getListStreetNumber',
        'building_id' => 'getBuildingId',
        'building_name' => 'getBuildingName',
        'building_info_1' => 'getBuildingInfo1',
        'building_info_2' => 'getBuildingInfo2',
        'building_info_3' => 'getBuildingInfo3',
        'building_info_4' => 'getBuildingInfo4',
        'building_info_5' => 'getBuildingInfo5',
        'company_id' => 'getCompanyId',
        'company' => 'getCompany',
        'company_info_1' => 'getCompanyInfo1',
        'company_info_2' => 'getCompanyInfo2',
        'formatted_address' => 'getFormattedAddress',
        'additional_info_1' => 'getAdditionalInfo1',
        'additional_info_2' => 'getAdditionalInfo2',
        'additional_info_3' => 'getAdditionalInfo3',
        'additional_info_4' => 'getAdditionalInfo4',
        'additional_info_5' => 'getAdditionalInfo5',
        'additional_info_6' => 'getAdditionalInfo6',
        'additional_info_7' => 'getAdditionalInfo7',
        'additional_info_8' => 'getAdditionalInfo8',
        'additional_info_9' => 'getAdditionalInfo9',
        'additional_info_10' => 'getAdditionalInfo10',
        'has_moved' => 'getHasMoved',
        'xy_data_base' => 'getXyDataBase',
        'x' => 'getX',
        'y' => 'getY',
        'accuracy' => 'getAccuracy',
        'id_carreau' => 'getIdCarreau',
        'id_inspire' => 'getIdInspire',
        'id_k' => 'getIdK'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['input_output'] = isset($data['input_output']) ? $data['input_output'] : null;
        $this->container['step'] = isset($data['step']) ? $data['step'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
        $this->container['quality_code'] = isset($data['quality_code']) ? $data['quality_code'] : null;
        $this->container['extended_quality_code'] = isset($data['extended_quality_code']) ? $data['extended_quality_code'] : null;
        $this->container['locality_id'] = isset($data['locality_id']) ? $data['locality_id'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['locality_synonym'] = isset($data['locality_synonym']) ? $data['locality_synonym'] : null;
        $this->container['locality_flags'] = isset($data['locality_flags']) ? $data['locality_flags'] : null;
        $this->container['locality_info_1'] = isset($data['locality_info_1']) ? $data['locality_info_1'] : null;
        $this->container['locality_info_2'] = isset($data['locality_info_2']) ? $data['locality_info_2'] : null;
        $this->container['locality_info_3'] = isset($data['locality_info_3']) ? $data['locality_info_3'] : null;
        $this->container['locality_info_4'] = isset($data['locality_info_4']) ? $data['locality_info_4'] : null;
        $this->container['locality_info_5'] = isset($data['locality_info_5']) ? $data['locality_info_5'] : null;
        $this->container['street_id'] = isset($data['street_id']) ? $data['street_id'] : null;
        $this->container['street_name'] = isset($data['street_name']) ? $data['street_name'] : null;
        $this->container['street_flags'] = isset($data['street_flags']) ? $data['street_flags'] : null;
        $this->container['street_type'] = isset($data['street_type']) ? $data['street_type'] : null;
        $this->container['abbreviated_street_type'] = isset($data['abbreviated_street_type']) ? $data['abbreviated_street_type'] : null;
        $this->container['street_synonym'] = isset($data['street_synonym']) ? $data['street_synonym'] : null;
        $this->container['street_info_1'] = isset($data['street_info_1']) ? $data['street_info_1'] : null;
        $this->container['street_info_2'] = isset($data['street_info_2']) ? $data['street_info_2'] : null;
        $this->container['street_info_3'] = isset($data['street_info_3']) ? $data['street_info_3'] : null;
        $this->container['street_info_4'] = isset($data['street_info_4']) ? $data['street_info_4'] : null;
        $this->container['street_info_5'] = isset($data['street_info_5']) ? $data['street_info_5'] : null;
        $this->container['street_number'] = isset($data['street_number']) ? $data['street_number'] : null;
        $this->container['street_number_id'] = isset($data['street_number_id']) ? $data['street_number_id'] : null;
        $this->container['street_number_ext'] = isset($data['street_number_ext']) ? $data['street_number_ext'] : null;
        $this->container['street_number_position'] = isset($data['street_number_position']) ? $data['street_number_position'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
        $this->container['range_type'] = isset($data['range_type']) ? $data['range_type'] : null;
        $this->container['list_street_number'] = isset($data['list_street_number']) ? $data['list_street_number'] : null;
        $this->container['building_id'] = isset($data['building_id']) ? $data['building_id'] : null;
        $this->container['building_name'] = isset($data['building_name']) ? $data['building_name'] : null;
        $this->container['building_info_1'] = isset($data['building_info_1']) ? $data['building_info_1'] : null;
        $this->container['building_info_2'] = isset($data['building_info_2']) ? $data['building_info_2'] : null;
        $this->container['building_info_3'] = isset($data['building_info_3']) ? $data['building_info_3'] : null;
        $this->container['building_info_4'] = isset($data['building_info_4']) ? $data['building_info_4'] : null;
        $this->container['building_info_5'] = isset($data['building_info_5']) ? $data['building_info_5'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['company_info_1'] = isset($data['company_info_1']) ? $data['company_info_1'] : null;
        $this->container['company_info_2'] = isset($data['company_info_2']) ? $data['company_info_2'] : null;
        $this->container['formatted_address'] = isset($data['formatted_address']) ? $data['formatted_address'] : null;
        $this->container['additional_info_1'] = isset($data['additional_info_1']) ? $data['additional_info_1'] : null;
        $this->container['additional_info_2'] = isset($data['additional_info_2']) ? $data['additional_info_2'] : null;
        $this->container['additional_info_3'] = isset($data['additional_info_3']) ? $data['additional_info_3'] : null;
        $this->container['additional_info_4'] = isset($data['additional_info_4']) ? $data['additional_info_4'] : null;
        $this->container['additional_info_5'] = isset($data['additional_info_5']) ? $data['additional_info_5'] : null;
        $this->container['additional_info_6'] = isset($data['additional_info_6']) ? $data['additional_info_6'] : null;
        $this->container['additional_info_7'] = isset($data['additional_info_7']) ? $data['additional_info_7'] : null;
        $this->container['additional_info_8'] = isset($data['additional_info_8']) ? $data['additional_info_8'] : null;
        $this->container['additional_info_9'] = isset($data['additional_info_9']) ? $data['additional_info_9'] : null;
        $this->container['additional_info_10'] = isset($data['additional_info_10']) ? $data['additional_info_10'] : null;
        $this->container['has_moved'] = isset($data['has_moved']) ? $data['has_moved'] : null;
        $this->container['xy_data_base'] = isset($data['xy_data_base']) ? $data['xy_data_base'] : null;
        $this->container['x'] = isset($data['x']) ? $data['x'] : null;
        $this->container['y'] = isset($data['y']) ? $data['y'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['id_carreau'] = isset($data['id_carreau']) ? $data['id_carreau'] : null;
        $this->container['id_inspire'] = isset($data['id_inspire']) ? $data['id_inspire'] : null;
        $this->container['id_k'] = isset($data['id_k']) ? $data['id_k'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets input_output
     *
     * @return string
     */
    public function getInputOutput()
    {
        return $this->container['input_output'];
    }

    /**
     * Sets input_output
     *
     * @param string $input_output Chaine à afficher à l'utilisateur.
     *
     * @return $this
     */
    public function setInputOutput($input_output)
    {
        $this->container['input_output'] = $input_output;

        return $this;
    }

    /**
     * Gets step
     *
     * @return string
     */
    public function getStep()
    {
        return $this->container['step'];
    }

    /**
     * Sets step
     *
     * @param string $step Etape suivante de la recherche.
     *
     * @return $this
     */
    public function setStep($step)
    {
        $this->container['step'] = $step;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code Code pays.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code Code langue.
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets quality_code
     *
     * @return string
     */
    public function getQualityCode()
    {
        return $this->container['quality_code'];
    }

    /**
     * Sets quality_code
     *
     * @param string $quality_code Code qualité adresse.
     *
     * @return $this
     */
    public function setQualityCode($quality_code)
    {
        $this->container['quality_code'] = $quality_code;

        return $this;
    }

    /**
     * Gets extended_quality_code
     *
     * @return string
     */
    public function getExtendedQualityCode()
    {
        return $this->container['extended_quality_code'];
    }

    /**
     * Sets extended_quality_code
     *
     * @param string $extended_quality_code Code Qualité Adresse étendu.
     *
     * @return $this
     */
    public function setExtendedQualityCode($extended_quality_code)
    {
        $this->container['extended_quality_code'] = $extended_quality_code;

        return $this;
    }

    /**
     * Gets locality_id
     *
     * @return string
     */
    public function getLocalityId()
    {
        return $this->container['locality_id'];
    }

    /**
     * Sets locality_id
     *
     * @param string $locality_id Identifiant de localité (Code INSEE).
     *
     * @return $this
     */
    public function setLocalityId($locality_id)
    {
        $this->container['locality_id'] = $locality_id;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code Code Postal.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets locality
     *
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     *
     * @param string $locality Localité.
     *
     * @return $this
     */
    public function setLocality($locality)
    {
        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets locality_synonym
     *
     * @return string
     */
    public function getLocalitySynonym()
    {
        return $this->container['locality_synonym'];
    }

    /**
     * Sets locality_synonym
     *
     * @param string $locality_synonym Lieu dit postal ou INSEE.
     *
     * @return $this
     */
    public function setLocalitySynonym($locality_synonym)
    {
        $this->container['locality_synonym'] = $locality_synonym;

        return $this;
    }

    /**
     * Gets locality_flags
     *
     * @return int
     */
    public function getLocalityFlags()
    {
        return $this->container['locality_flags'];
    }

    /**
     * Sets locality_flags
     *
     * @param int $locality_flags Type de couple Code Postal Localité.
     *
     * @return $this
     */
    public function setLocalityFlags($locality_flags)
    {
        $this->container['locality_flags'] = $locality_flags;

        return $this;
    }

    /**
     * Gets locality_info_1
     *
     * @return string
     */
    public function getLocalityInfo1()
    {
        return $this->container['locality_info_1'];
    }

    /**
     * Sets locality_info_1
     *
     * @param string $locality_info_1 Code postal géographique.
     *
     * @return $this
     */
    public function setLocalityInfo1($locality_info_1)
    {
        $this->container['locality_info_1'] = $locality_info_1;

        return $this;
    }

    /**
     * Gets locality_info_2
     *
     * @return string
     */
    public function getLocalityInfo2()
    {
        return $this->container['locality_info_2'];
    }

    /**
     * Sets locality_info_2
     *
     * @param string $locality_info_2 Commune géographique si différent de la localité cedex.
     *
     * @return $this
     */
    public function setLocalityInfo2($locality_info_2)
    {
        $this->container['locality_info_2'] = $locality_info_2;

        return $this;
    }

    /**
     * Gets locality_info_3
     *
     * @return string
     */
    public function getLocalityInfo3()
    {
        return $this->container['locality_info_3'];
    }

    /**
     * Sets locality_info_3
     *
     * @param string $locality_info_3 Département.
     *
     * @return $this
     */
    public function setLocalityInfo3($locality_info_3)
    {
        $this->container['locality_info_3'] = $locality_info_3;

        return $this;
    }

    /**
     * Gets locality_info_4
     *
     * @return string
     */
    public function getLocalityInfo4()
    {
        return $this->container['locality_info_4'];
    }

    /**
     * Sets locality_info_4
     *
     * @param string $locality_info_4 Région.
     *
     * @return $this
     */
    public function setLocalityInfo4($locality_info_4)
    {
        $this->container['locality_info_4'] = $locality_info_4;

        return $this;
    }

    /**
     * Gets locality_info_5
     *
     * @return string
     */
    public function getLocalityInfo5()
    {
        return $this->container['locality_info_5'];
    }

    /**
     * Sets locality_info_5
     *
     * @param string $locality_info_5 Tranche de population suivi du nombre d 'habitants.
     *
     * @return $this
     */
    public function setLocalityInfo5($locality_info_5)
    {
        $this->container['locality_info_5'] = $locality_info_5;

        return $this;
    }

    /**
     * Gets street_id
     *
     * @return string
     */
    public function getStreetId()
    {
        return $this->container['street_id'];
    }

    /**
     * Sets street_id
     *
     * @param string $street_id Identifiant de voie (Matricule HEXAVIA).
     *
     * @return $this
     */
    public function setStreetId($street_id)
    {
        $this->container['street_id'] = $street_id;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string $street_name Ligne 4 postale (voie).
     *
     * @return $this
     */
    public function setStreetName($street_name)
    {
        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_flags
     *
     * @return int
     */
    public function getStreetFlags()
    {
        return $this->container['street_flags'];
    }

    /**
     * Sets street_flags
     *
     * @param int $street_flags Type de synonyme de voie.
     *
     * @return $this
     */
    public function setStreetFlags($street_flags)
    {
        $this->container['street_flags'] = $street_flags;

        return $this;
    }

    /**
     * Gets street_type
     *
     * @return string
     */
    public function getStreetType()
    {
        return $this->container['street_type'];
    }

    /**
     * Sets street_type
     *
     * @param string $street_type Type de voie.
     *
     * @return $this
     */
    public function setStreetType($street_type)
    {
        $this->container['street_type'] = $street_type;

        return $this;
    }

    /**
     * Gets abbreviated_street_type
     *
     * @return string
     */
    public function getAbbreviatedStreetType()
    {
        return $this->container['abbreviated_street_type'];
    }

    /**
     * Sets abbreviated_street_type
     *
     * @param string $abbreviated_street_type Type de voie abrégé.
     *
     * @return $this
     */
    public function setAbbreviatedStreetType($abbreviated_street_type)
    {
        $this->container['abbreviated_street_type'] = $abbreviated_street_type;

        return $this;
    }

    /**
     * Gets street_synonym
     *
     * @return string
     */
    public function getStreetSynonym()
    {
        return $this->container['street_synonym'];
    }

    /**
     * Sets street_synonym
     *
     * @param string $street_synonym Ancienne dénomination de voie.
     *
     * @return $this
     */
    public function setStreetSynonym($street_synonym)
    {
        $this->container['street_synonym'] = $street_synonym;

        return $this;
    }

    /**
     * Gets street_info_1
     *
     * @return string
     */
    public function getStreetInfo1()
    {
        return $this->container['street_info_1'];
    }

    /**
     * Sets street_info_1
     *
     * @param string $street_info_1 Mot directeur de la voie (dernier mot).
     *
     * @return $this
     */
    public function setStreetInfo1($street_info_1)
    {
        $this->container['street_info_1'] = $street_info_1;

        return $this;
    }

    /**
     * Gets street_info_2
     *
     * @return string
     */
    public function getStreetInfo2()
    {
        return $this->container['street_info_2'];
    }

    /**
     * Sets street_info_2
     *
     * @param string $street_info_2 Reste voie.
     *
     * @return $this
     */
    public function setStreetInfo2($street_info_2)
    {
        $this->container['street_info_2'] = $street_info_2;

        return $this;
    }

    /**
     * Gets street_info_3
     *
     * @return string
     */
    public function getStreetInfo3()
    {
        return $this->container['street_info_3'];
    }

    /**
     * Sets street_info_3
     *
     * @param string $street_info_3 Tournée facteur (si abonnement ROUDIS).
     *
     * @return $this
     */
    public function setStreetInfo3($street_info_3)
    {
        $this->container['street_info_3'] = $street_info_3;

        return $this;
    }

    /**
     * Gets street_info_4
     *
     * @return string
     */
    public function getStreetInfo4()
    {
        return $this->container['street_info_4'];
    }

    /**
     * Sets street_info_4
     *
     * @param string $street_info_4 Index ROUDIS.
     *
     * @return $this
     */
    public function setStreetInfo4($street_info_4)
    {
        $this->container['street_info_4'] = $street_info_4;

        return $this;
    }

    /**
     * Gets street_info_5
     *
     * @return string
     */
    public function getStreetInfo5()
    {
        return $this->container['street_info_5'];
    }

    /**
     * Sets street_info_5
     *
     * @param string $street_info_5 Identifiant de la voie (Code HEXACLE VOIE).
     *
     * @return $this
     */
    public function setStreetInfo5($street_info_5)
    {
        $this->container['street_info_5'] = $street_info_5;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string $street_number Numéro de voie.
     *
     * @return $this
     */
    public function setStreetNumber($street_number)
    {
        $this->container['street_number'] = $street_number;

        return $this;
    }

    /**
     * Gets street_number_id
     *
     * @return string
     */
    public function getStreetNumberId()
    {
        return $this->container['street_number_id'];
    }

    /**
     * Sets street_number_id
     *
     * @param string $street_number_id Identifiant du numéro de voie (Code HEXACLE).
     *
     * @return $this
     */
    public function setStreetNumberId($street_number_id)
    {
        $this->container['street_number_id'] = $street_number_id;

        return $this;
    }

    /**
     * Gets street_number_ext
     *
     * @return string
     */
    public function getStreetNumberExt()
    {
        return $this->container['street_number_ext'];
    }

    /**
     * Sets street_number_ext
     *
     * @param string $street_number_ext Complément du numéro.
     *
     * @return $this
     */
    public function setStreetNumberExt($street_number_ext)
    {
        $this->container['street_number_ext'] = $street_number_ext;

        return $this;
    }

    /**
     * Gets street_number_position
     *
     * @return int
     */
    public function getStreetNumberPosition()
    {
        return $this->container['street_number_position'];
    }

    /**
     * Sets street_number_position
     *
     * @param int $street_number_position Choix du positionement du numéro dans la voie (1: avant, 2: après).
     *
     * @return $this
     */
    public function setStreetNumberPosition($street_number_position)
    {
        $this->container['street_number_position'] = $street_number_position;

        return $this;
    }

    /**
     * Gets range
     *
     * @return string
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param string $range Borne de voie.
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }

    /**
     * Gets range_type
     *
     * @return string
     */
    public function getRangeType()
    {
        return $this->container['range_type'];
    }

    /**
     * Sets range_type
     *
     * @param string $range_type Non utilisé.
     *
     * @return $this
     */
    public function setRangeType($range_type)
    {
        $this->container['range_type'] = $range_type;

        return $this;
    }

    /**
     * Gets list_street_number
     *
     * @return string
     */
    public function getListStreetNumber()
    {
        return $this->container['list_street_number'];
    }

    /**
     * Sets list_street_number
     *
     * @param string $list_street_number Liste des numéros de voie.
     *
     * @return $this
     */
    public function setListStreetNumber($list_street_number)
    {
        $this->container['list_street_number'] = $list_street_number;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return string
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param string $building_id Identifiant du bâtiment (Code HEXALIGNE3).
     *
     * @return $this
     */
    public function setBuildingId($building_id)
    {
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets building_name
     *
     * @return string
     */
    public function getBuildingName()
    {
        return $this->container['building_name'];
    }

    /**
     * Sets building_name
     *
     * @param string $building_name Libellé du complément d'adresse.
     *
     * @return $this
     */
    public function setBuildingName($building_name)
    {
        $this->container['building_name'] = $building_name;

        return $this;
    }

    /**
     * Gets building_info_1
     *
     * @return string
     */
    public function getBuildingInfo1()
    {
        return $this->container['building_info_1'];
    }

    /**
     * Sets building_info_1
     *
     * @param string $building_info_1 Informations additionnelles du bâtiment.
     *
     * @return $this
     */
    public function setBuildingInfo1($building_info_1)
    {
        $this->container['building_info_1'] = $building_info_1;

        return $this;
    }

    /**
     * Gets building_info_2
     *
     * @return string
     */
    public function getBuildingInfo2()
    {
        return $this->container['building_info_2'];
    }

    /**
     * Sets building_info_2
     *
     * @param string $building_info_2 Non utilisé.
     *
     * @return $this
     */
    public function setBuildingInfo2($building_info_2)
    {
        $this->container['building_info_2'] = $building_info_2;

        return $this;
    }

    /**
     * Gets building_info_3
     *
     * @return string
     */
    public function getBuildingInfo3()
    {
        return $this->container['building_info_3'];
    }

    /**
     * Sets building_info_3
     *
     * @param string $building_info_3 Non utilisé.
     *
     * @return $this
     */
    public function setBuildingInfo3($building_info_3)
    {
        $this->container['building_info_3'] = $building_info_3;

        return $this;
    }

    /**
     * Gets building_info_4
     *
     * @return string
     */
    public function getBuildingInfo4()
    {
        return $this->container['building_info_4'];
    }

    /**
     * Sets building_info_4
     *
     * @param string $building_info_4 Non utilisé.
     *
     * @return $this
     */
    public function setBuildingInfo4($building_info_4)
    {
        $this->container['building_info_4'] = $building_info_4;

        return $this;
    }

    /**
     * Gets building_info_5
     *
     * @return string
     */
    public function getBuildingInfo5()
    {
        return $this->container['building_info_5'];
    }

    /**
     * Sets building_info_5
     *
     * @param string $building_info_5 Non utilisé.
     *
     * @return $this
     */
    public function setBuildingInfo5($building_info_5)
    {
        $this->container['building_info_5'] = $building_info_5;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string $company_id Numéro de dossier cedexa.
     *
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company Nom de la société.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets company_info_1
     *
     * @return string
     */
    public function getCompanyInfo1()
    {
        return $this->container['company_info_1'];
    }

    /**
     * Sets company_info_1
     *
     * @param string $company_info_1 Ligne 2 société.
     *
     * @return $this
     */
    public function setCompanyInfo1($company_info_1)
    {
        $this->container['company_info_1'] = $company_info_1;

        return $this;
    }

    /**
     * Gets company_info_2
     *
     * @return string
     */
    public function getCompanyInfo2()
    {
        return $this->container['company_info_2'];
    }

    /**
     * Sets company_info_2
     *
     * @param string $company_info_2 Boite Postale.
     *
     * @return $this
     */
    public function setCompanyInfo2($company_info_2)
    {
        $this->container['company_info_2'] = $company_info_2;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address Adresse formaté.
     *
     * @return $this
     */
    public function setFormattedAddress($formatted_address)
    {
        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets additional_info_1
     *
     * @return string
     */
    public function getAdditionalInfo1()
    {
        return $this->container['additional_info_1'];
    }

    /**
     * Sets additional_info_1
     *
     * @param string $additional_info_1 Ligne de distribution.
     *
     * @return $this
     */
    public function setAdditionalInfo1($additional_info_1)
    {
        $this->container['additional_info_1'] = $additional_info_1;

        return $this;
    }

    /**
     * Gets additional_info_2
     *
     * @return string
     */
    public function getAdditionalInfo2()
    {
        return $this->container['additional_info_2'];
    }

    /**
     * Sets additional_info_2
     *
     * @param string $additional_info_2 Ligne d'acheminement.
     *
     * @return $this
     */
    public function setAdditionalInfo2($additional_info_2)
    {
        $this->container['additional_info_2'] = $additional_info_2;

        return $this;
    }

    /**
     * Gets additional_info_3
     *
     * @return string
     */
    public function getAdditionalInfo3()
    {
        return $this->container['additional_info_3'];
    }

    /**
     * Sets additional_info_3
     *
     * @param string $additional_info_3 Non utilisé.
     *
     * @return $this
     */
    public function setAdditionalInfo3($additional_info_3)
    {
        $this->container['additional_info_3'] = $additional_info_3;

        return $this;
    }

    /**
     * Gets additional_info_4
     *
     * @return string
     */
    public function getAdditionalInfo4()
    {
        return $this->container['additional_info_4'];
    }

    /**
     * Sets additional_info_4
     *
     * @param string $additional_info_4 Autres numéros de voie.
     *
     * @return $this
     */
    public function setAdditionalInfo4($additional_info_4)
    {
        $this->container['additional_info_4'] = $additional_info_4;

        return $this;
    }

    /**
     * Gets additional_info_5
     *
     * @return string
     */
    public function getAdditionalInfo5()
    {
        return $this->container['additional_info_5'];
    }

    /**
     * Sets additional_info_5
     *
     * @param string $additional_info_5 Code IRIS.
     *
     * @return $this
     */
    public function setAdditionalInfo5($additional_info_5)
    {
        $this->container['additional_info_5'] = $additional_info_5;

        return $this;
    }

    /**
     * Gets additional_info_6
     *
     * @return string
     */
    public function getAdditionalInfo6()
    {
        return $this->container['additional_info_6'];
    }

    /**
     * Sets additional_info_6
     *
     * @param string $additional_info_6 CSP.
     *
     * @return $this
     */
    public function setAdditionalInfo6($additional_info_6)
    {
        $this->container['additional_info_6'] = $additional_info_6;

        return $this;
    }

    /**
     * Gets additional_info_7
     *
     * @return string
     */
    public function getAdditionalInfo7()
    {
        return $this->container['additional_info_7'];
    }

    /**
     * Sets additional_info_7
     *
     * @param string $additional_info_7 Ligne 5 postale.
     *
     * @return $this
     */
    public function setAdditionalInfo7($additional_info_7)
    {
        $this->container['additional_info_7'] = $additional_info_7;

        return $this;
    }

    /**
     * Gets additional_info_8
     *
     * @return string
     */
    public function getAdditionalInfo8()
    {
        return $this->container['additional_info_8'];
    }

    /**
     * Sets additional_info_8
     *
     * @param string $additional_info_8 Non utilisé.
     *
     * @return $this
     */
    public function setAdditionalInfo8($additional_info_8)
    {
        $this->container['additional_info_8'] = $additional_info_8;

        return $this;
    }

    /**
     * Gets additional_info_9
     *
     * @return string
     */
    public function getAdditionalInfo9()
    {
        return $this->container['additional_info_9'];
    }

    /**
     * Sets additional_info_9
     *
     * @param string $additional_info_9 Non utilisé.
     *
     * @return $this
     */
    public function setAdditionalInfo9($additional_info_9)
    {
        $this->container['additional_info_9'] = $additional_info_9;

        return $this;
    }

    /**
     * Gets additional_info_10
     *
     * @return string
     */
    public function getAdditionalInfo10()
    {
        return $this->container['additional_info_10'];
    }

    /**
     * Sets additional_info_10
     *
     * @param string $additional_info_10 Non utilisé.
     *
     * @return $this
     */
    public function setAdditionalInfo10($additional_info_10)
    {
        $this->container['additional_info_10'] = $additional_info_10;

        return $this;
    }

    /**
     * Gets has_moved
     *
     * @return int
     */
    public function getHasMoved()
    {
        return $this->container['has_moved'];
    }

    /**
     * Sets has_moved
     *
     * @param int $has_moved Indicateur déménagé.
     *
     * @return $this
     */
    public function setHasMoved($has_moved)
    {
        $this->container['has_moved'] = $has_moved;

        return $this;
    }

    /**
     * Gets xy_data_base
     *
     * @return int
     */
    public function getXyDataBase()
    {
        return $this->container['xy_data_base'];
    }

    /**
     * Sets xy_data_base
     *
     * @param int $xy_data_base Base de géocodage.
     *
     * @return $this
     */
    public function setXyDataBase($xy_data_base)
    {
        $this->container['xy_data_base'] = $xy_data_base;

        return $this;
    }

    /**
     * Gets x
     *
     * @return string
     */
    public function getX()
    {
        return $this->container['x'];
    }

    /**
     * Sets x
     *
     * @param string $x Coordonnées X.
     *
     * @return $this
     */
    public function setX($x)
    {
        $this->container['x'] = $x;

        return $this;
    }

    /**
     * Gets y
     *
     * @return string
     */
    public function getY()
    {
        return $this->container['y'];
    }

    /**
     * Sets y
     *
     * @param string $y Coordonnées Y.
     *
     * @return $this
     */
    public function setY($y)
    {
        $this->container['y'] = $y;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return int
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param int $accuracy Indicateur précision.
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets id_carreau
     *
     * @return string
     */
    public function getIdCarreau()
    {
        return $this->container['id_carreau'];
    }

    /**
     * Sets id_carreau
     *
     * @param string $id_carreau Identifiant du carreau.
     *
     * @return $this
     */
    public function setIdCarreau($id_carreau)
    {
        $this->container['id_carreau'] = $id_carreau;

        return $this;
    }

    /**
     * Gets id_inspire
     *
     * @return string
     */
    public function getIdInspire()
    {
        return $this->container['id_inspire'];
    }

    /**
     * Sets id_inspire
     *
     * @param string $id_inspire Code du carreau (= identifiant INSPIRE).
     *
     * @return $this
     */
    public function setIdInspire($id_inspire)
    {
        $this->container['id_inspire'] = $id_inspire;

        return $this;
    }

    /**
     * Gets id_k
     *
     * @return string
     */
    public function getIdK()
    {
        return $this->container['id_k'];
    }

    /**
     * Sets id_k
     *
     * @param string $id_k Code du rectangle associé.
     *
     * @return $this
     */
    public function setIdK($id_k)
    {
        $this->container['id_k'] = $id_k;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


