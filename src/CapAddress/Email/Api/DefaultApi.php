<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  CapAddress\Email
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CAP E-MAIL
 *
 * CAP E-MAIL est un service web d'aide à la saisie et de vérification d'adresses e-mail.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@capadresse.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CapAddress\Email\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CapAddress\Email\ApiException;
use CapAddress\Email\Configuration;
use CapAddress\Email\HeaderSelector;
use CapAddress\Email\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  CapAddress\Email
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkMailPropGet
     *
     * Validation de l'adresse email (avec proposition)
     *
     * @param  string $request request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Email\Model\CheckMailPropResponse
     */
    public function checkMailPropGet($request, $s_mail = null, $s_langue = null)
    {
        list($response) = $this->checkMailPropGetWithHttpInfo($request, $s_mail, $s_langue);
        return $response;
    }

    /**
     * Operation checkMailPropGetWithHttpInfo
     *
     * Validation de l'adresse email (avec proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Email\Model\CheckMailPropResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkMailPropGetWithHttpInfo($request, $s_mail = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\CheckMailPropResponse';
        $request = $this->checkMailPropGetRequest($request, $s_mail, $s_langue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Email\Model\CheckMailPropResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkMailPropGetAsync
     *
     * Validation de l'adresse email (avec proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkMailPropGetAsync($request, $s_mail = null, $s_langue = null)
    {
        return $this->checkMailPropGetAsyncWithHttpInfo($request, $s_mail, $s_langue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkMailPropGetAsyncWithHttpInfo
     *
     * Validation de l'adresse email (avec proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkMailPropGetAsyncWithHttpInfo($request, $s_mail = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\CheckMailPropResponse';
        $request = $this->checkMailPropGetRequest($request, $s_mail, $s_langue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkMailPropGet'
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkMailPropGetRequest($request, $s_mail = null, $s_langue = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling checkMailPropGet'
            );
        }

        $resourcePath = '/CheckMailProp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_mail !== null) {
            $queryParams['sMail'] = ObjectSerializer::toQueryValue($s_mail);
        }
        // query params
        if ($s_langue !== null) {
            $queryParams['sLangue'] = ObjectSerializer::toQueryValue($s_langue);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkMailSrvWSGet
     *
     * Validation de l'adresse email (sans proposition)
     *
     * @param  string $request request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Email\Model\CheckMailSrvWSResponse
     */
    public function checkMailSrvWSGet($request, $s_mail = null, $s_langue = null)
    {
        list($response) = $this->checkMailSrvWSGetWithHttpInfo($request, $s_mail, $s_langue);
        return $response;
    }

    /**
     * Operation checkMailSrvWSGetWithHttpInfo
     *
     * Validation de l'adresse email (sans proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Email\Model\CheckMailSrvWSResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkMailSrvWSGetWithHttpInfo($request, $s_mail = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\CheckMailSrvWSResponse';
        $request = $this->checkMailSrvWSGetRequest($request, $s_mail, $s_langue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Email\Model\CheckMailSrvWSResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkMailSrvWSGetAsync
     *
     * Validation de l'adresse email (sans proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkMailSrvWSGetAsync($request, $s_mail = null, $s_langue = null)
    {
        return $this->checkMailSrvWSGetAsyncWithHttpInfo($request, $s_mail, $s_langue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkMailSrvWSGetAsyncWithHttpInfo
     *
     * Validation de l'adresse email (sans proposition)
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkMailSrvWSGetAsyncWithHttpInfo($request, $s_mail = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\CheckMailSrvWSResponse';
        $request = $this->checkMailSrvWSGetRequest($request, $s_mail, $s_langue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkMailSrvWSGet'
     *
     * @param  string $request (required)
     * @param  string $s_mail L&#39;adresse e-mail à tester. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkMailSrvWSGetRequest($request, $s_mail = null, $s_langue = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling checkMailSrvWSGet'
            );
        }

        $resourcePath = '/CheckMailSrvWS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_mail !== null) {
            $queryParams['sMail'] = ObjectSerializer::toQueryValue($s_mail);
        }
        // query params
        if ($s_langue !== null) {
            $queryParams['sLangue'] = ObjectSerializer::toQueryValue($s_langue);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchMailCivWSGet
     *
     * Aide à la saisie d'adresses emails
     *
     * @param  string $request request (required)
     * @param  string $s_input La saisie en cours de l&#39;adresse email. (optional)
     * @param  string $s_nom Nom saisi (peut être vide). (optional)
     * @param  string $s_prenom Prénom saisi (peut être vide). (optional)
     * @param  string $s_pays Code ISO 3166-1 alpha-3 du pays pour lequel proposer les noms de domaine. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Email\Model\SearchMailCivWSResponse
     */
    public function searchMailCivWSGet($request, $s_input = null, $s_nom = null, $s_prenom = null, $s_pays = null, $s_langue = null)
    {
        list($response) = $this->searchMailCivWSGetWithHttpInfo($request, $s_input, $s_nom, $s_prenom, $s_pays, $s_langue);
        return $response;
    }

    /**
     * Operation searchMailCivWSGetWithHttpInfo
     *
     * Aide à la saisie d'adresses emails
     *
     * @param  string $request (required)
     * @param  string $s_input La saisie en cours de l&#39;adresse email. (optional)
     * @param  string $s_nom Nom saisi (peut être vide). (optional)
     * @param  string $s_prenom Prénom saisi (peut être vide). (optional)
     * @param  string $s_pays Code ISO 3166-1 alpha-3 du pays pour lequel proposer les noms de domaine. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \CapAddress\Email\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Email\Model\SearchMailCivWSResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchMailCivWSGetWithHttpInfo($request, $s_input = null, $s_nom = null, $s_prenom = null, $s_pays = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\SearchMailCivWSResponse';
        $request = $this->searchMailCivWSGetRequest($request, $s_input, $s_nom, $s_prenom, $s_pays, $s_langue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Email\Model\SearchMailCivWSResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchMailCivWSGetAsync
     *
     * Aide à la saisie d'adresses emails
     *
     * @param  string $request (required)
     * @param  string $s_input La saisie en cours de l&#39;adresse email. (optional)
     * @param  string $s_nom Nom saisi (peut être vide). (optional)
     * @param  string $s_prenom Prénom saisi (peut être vide). (optional)
     * @param  string $s_pays Code ISO 3166-1 alpha-3 du pays pour lequel proposer les noms de domaine. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMailCivWSGetAsync($request, $s_input = null, $s_nom = null, $s_prenom = null, $s_pays = null, $s_langue = null)
    {
        return $this->searchMailCivWSGetAsyncWithHttpInfo($request, $s_input, $s_nom, $s_prenom, $s_pays, $s_langue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchMailCivWSGetAsyncWithHttpInfo
     *
     * Aide à la saisie d'adresses emails
     *
     * @param  string $request (required)
     * @param  string $s_input La saisie en cours de l&#39;adresse email. (optional)
     * @param  string $s_nom Nom saisi (peut être vide). (optional)
     * @param  string $s_prenom Prénom saisi (peut être vide). (optional)
     * @param  string $s_pays Code ISO 3166-1 alpha-3 du pays pour lequel proposer les noms de domaine. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMailCivWSGetAsyncWithHttpInfo($request, $s_input = null, $s_nom = null, $s_prenom = null, $s_pays = null, $s_langue = null)
    {
        $returnType = '\CapAddress\Email\Model\SearchMailCivWSResponse';
        $request = $this->searchMailCivWSGetRequest($request, $s_input, $s_nom, $s_prenom, $s_pays, $s_langue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchMailCivWSGet'
     *
     * @param  string $request (required)
     * @param  string $s_input La saisie en cours de l&#39;adresse email. (optional)
     * @param  string $s_nom Nom saisi (peut être vide). (optional)
     * @param  string $s_prenom Prénom saisi (peut être vide). (optional)
     * @param  string $s_pays Code ISO 3166-1 alpha-3 du pays pour lequel proposer les noms de domaine. (optional)
     * @param  string $s_langue Code ISO 639-1 de la langue dans laquelle seront affichés les messages (si omis, les messages seront affichés en français). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchMailCivWSGetRequest($request, $s_input = null, $s_nom = null, $s_prenom = null, $s_pays = null, $s_langue = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling searchMailCivWSGet'
            );
        }

        $resourcePath = '/SearchMailCivWS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_input !== null) {
            $queryParams['sInput'] = ObjectSerializer::toQueryValue($s_input);
        }
        // query params
        if ($s_nom !== null) {
            $queryParams['sNom'] = ObjectSerializer::toQueryValue($s_nom);
        }
        // query params
        if ($s_prenom !== null) {
            $queryParams['sPrenom'] = ObjectSerializer::toQueryValue($s_prenom);
        }
        // query params
        if ($s_pays !== null) {
            $queryParams['sPays'] = ObjectSerializer::toQueryValue($s_pays);
        }
        // query params
        if ($s_langue !== null) {
            $queryParams['sLangue'] = ObjectSerializer::toQueryValue($s_langue);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
