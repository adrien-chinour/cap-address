<?php
/**
 * Validphone
 *
 * PHP version 5
 *
 * @category Class
 * @package  CapAddress\Phone
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CAP PHONE
 *
 * Cap Phone va permettre d’assister l’utilisateur lors de la validation d’un numéro de téléphone et s’assurer de la conformité syntaxique de ce dernier avant de le stocker en base de données. Le but étant de s’assurer que chaque numéro de téléphone entré en base de données est syntaxiquement correct et stocké dans un même format.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@capadresse.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CapAddress\Phone\Model;

use \ArrayAccess;
use \CapAddress\Phone\ObjectSerializer;

/**
 * Validphone Class Doc Comment
 *
 * @category Class
 * @package  CapAddress\Phone
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Validphone implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'validphone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'i_country_code_mcc' => 'int',
        's_net_work_code_mnc' => 'string',
        's_net_work_country' => 'string',
        's_net_work_name' => 'string',
        'ils_connected' => 'int',
        's_code_retour' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'i_country_code_mcc' => 'int32',
        's_net_work_code_mnc' => null,
        's_net_work_country' => null,
        's_net_work_name' => null,
        'ils_connected' => 'int32',
        's_code_retour' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'i_country_code_mcc' => 'iCountryCodeMCC',
        's_net_work_code_mnc' => 'sNetWorkCodeMNC',
        's_net_work_country' => 'sNetWorkCountry',
        's_net_work_name' => 'sNetWorkName',
        'ils_connected' => 'ilsConnected',
        's_code_retour' => 'sCodeRetour'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'i_country_code_mcc' => 'setICountryCodeMcc',
        's_net_work_code_mnc' => 'setSNetWorkCodeMnc',
        's_net_work_country' => 'setSNetWorkCountry',
        's_net_work_name' => 'setSNetWorkName',
        'ils_connected' => 'setIlsConnected',
        's_code_retour' => 'setSCodeRetour'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'i_country_code_mcc' => 'getICountryCodeMcc',
        's_net_work_code_mnc' => 'getSNetWorkCodeMnc',
        's_net_work_country' => 'getSNetWorkCountry',
        's_net_work_name' => 'getSNetWorkName',
        'ils_connected' => 'getIlsConnected',
        's_code_retour' => 'getSCodeRetour'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['i_country_code_mcc'] = isset($data['i_country_code_mcc']) ? $data['i_country_code_mcc'] : null;
        $this->container['s_net_work_code_mnc'] = isset($data['s_net_work_code_mnc']) ? $data['s_net_work_code_mnc'] : null;
        $this->container['s_net_work_country'] = isset($data['s_net_work_country']) ? $data['s_net_work_country'] : null;
        $this->container['s_net_work_name'] = isset($data['s_net_work_name']) ? $data['s_net_work_name'] : null;
        $this->container['ils_connected'] = isset($data['ils_connected']) ? $data['ils_connected'] : null;
        $this->container['s_code_retour'] = isset($data['s_code_retour']) ? $data['s_code_retour'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets i_country_code_mcc
     *
     * @return int
     */
    public function getICountryCodeMcc()
    {
        return $this->container['i_country_code_mcc'];
    }

    /**
     * Sets i_country_code_mcc
     *
     * @param int $i_country_code_mcc Code Pays sur le réseau MCC.
     *
     * @return $this
     */
    public function setICountryCodeMcc($i_country_code_mcc)
    {
        $this->container['i_country_code_mcc'] = $i_country_code_mcc;

        return $this;
    }

    /**
     * Gets s_net_work_code_mnc
     *
     * @return string
     */
    public function getSNetWorkCodeMnc()
    {
        return $this->container['s_net_work_code_mnc'];
    }

    /**
     * Sets s_net_work_code_mnc
     *
     * @param string $s_net_work_code_mnc Code du réseau MNC.
     *
     * @return $this
     */
    public function setSNetWorkCodeMnc($s_net_work_code_mnc)
    {
        $this->container['s_net_work_code_mnc'] = $s_net_work_code_mnc;

        return $this;
    }

    /**
     * Gets s_net_work_country
     *
     * @return string
     */
    public function getSNetWorkCountry()
    {
        return $this->container['s_net_work_country'];
    }

    /**
     * Sets s_net_work_country
     *
     * @param string $s_net_work_country Pays.
     *
     * @return $this
     */
    public function setSNetWorkCountry($s_net_work_country)
    {
        $this->container['s_net_work_country'] = $s_net_work_country;

        return $this;
    }

    /**
     * Gets s_net_work_name
     *
     * @return string
     */
    public function getSNetWorkName()
    {
        return $this->container['s_net_work_name'];
    }

    /**
     * Sets s_net_work_name
     *
     * @param string $s_net_work_name Nom de l'opérateur.
     *
     * @return $this
     */
    public function setSNetWorkName($s_net_work_name)
    {
        $this->container['s_net_work_name'] = $s_net_work_name;

        return $this;
    }

    /**
     * Gets ils_connected
     *
     * @return int
     */
    public function getIlsConnected()
    {
        return $this->container['ils_connected'];
    }

    /**
     * Sets ils_connected
     *
     * @param int $ils_connected Indicatif international.
     *
     * @return $this
     */
    public function setIlsConnected($ils_connected)
    {
        $this->container['ils_connected'] = $ils_connected;

        return $this;
    }

    /**
     * Gets s_code_retour
     *
     * @return string
     */
    public function getSCodeRetour()
    {
        return $this->container['s_code_retour'];
    }

    /**
     * Sets s_code_retour
     *
     * @param string $s_code_retour Code Retour.
     *
     * @return $this
     */
    public function setSCodeRetour($s_code_retour)
    {
        $this->container['s_code_retour'] = $s_code_retour;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


