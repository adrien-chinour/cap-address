<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  CapAddress\Phone
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CAP PHONE
 *
 * Cap Phone va permettre d’assister l’utilisateur lors de la validation d’un numéro de téléphone et s’assurer de la conformité syntaxique de ce dernier avant de le stocker en base de données. Le but étant de s’assurer que chaque numéro de téléphone entré en base de données est syntaxiquement correct et stocké dans un même format.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@capadresse.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CapAddress\Phone\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CapAddress\Phone\ApiException;
use CapAddress\Phone\Configuration;
use CapAddress\Phone\HeaderSelector;
use CapAddress\Phone\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  CapAddress\Phone
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkPhoneBookGet
     *
     * Permet d’obtenir les informations du propriétaire du numéro de téléphone.
     *
     * @param  string $request request (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_l1 Nom individu ou raison sociale si société. (optional)
     * @param  string $s_l2 Complément d&#39;adresse 1. (optional)
     * @param  string $s_l3 Complément d&#39;adresse 2. (optional)
     * @param  string $s_l4 Voie. (optional)
     * @param  string $s_l5 Lieu dit. (optional)
     * @param  string $s_l6 Code postal et localité. (optional)
     * @param  string $s_cp Code postal de l&#39;adresse. (optional)
     * @param  string $s_loc Localité de l&#39;adresse. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Phone\Model\CheckPhoneBookResponse
     */
    public function checkPhoneBookGet($request, $s_tel = null, $s_l1 = null, $s_l2 = null, $s_l3 = null, $s_l4 = null, $s_l5 = null, $s_l6 = null, $s_cp = null, $s_loc = null)
    {
        list($response) = $this->checkPhoneBookGetWithHttpInfo($request, $s_tel, $s_l1, $s_l2, $s_l3, $s_l4, $s_l5, $s_l6, $s_cp, $s_loc);
        return $response;
    }

    /**
     * Operation checkPhoneBookGetWithHttpInfo
     *
     * Permet d’obtenir les informations du propriétaire du numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_l1 Nom individu ou raison sociale si société. (optional)
     * @param  string $s_l2 Complément d&#39;adresse 1. (optional)
     * @param  string $s_l3 Complément d&#39;adresse 2. (optional)
     * @param  string $s_l4 Voie. (optional)
     * @param  string $s_l5 Lieu dit. (optional)
     * @param  string $s_l6 Code postal et localité. (optional)
     * @param  string $s_cp Code postal de l&#39;adresse. (optional)
     * @param  string $s_loc Localité de l&#39;adresse. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Phone\Model\CheckPhoneBookResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkPhoneBookGetWithHttpInfo($request, $s_tel = null, $s_l1 = null, $s_l2 = null, $s_l3 = null, $s_l4 = null, $s_l5 = null, $s_l6 = null, $s_cp = null, $s_loc = null)
    {
        $returnType = '\CapAddress\Phone\Model\CheckPhoneBookResponse';
        $request = $this->checkPhoneBookGetRequest($request, $s_tel, $s_l1, $s_l2, $s_l3, $s_l4, $s_l5, $s_l6, $s_cp, $s_loc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Phone\Model\CheckPhoneBookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkPhoneBookGetAsync
     *
     * Permet d’obtenir les informations du propriétaire du numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_l1 Nom individu ou raison sociale si société. (optional)
     * @param  string $s_l2 Complément d&#39;adresse 1. (optional)
     * @param  string $s_l3 Complément d&#39;adresse 2. (optional)
     * @param  string $s_l4 Voie. (optional)
     * @param  string $s_l5 Lieu dit. (optional)
     * @param  string $s_l6 Code postal et localité. (optional)
     * @param  string $s_cp Code postal de l&#39;adresse. (optional)
     * @param  string $s_loc Localité de l&#39;adresse. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPhoneBookGetAsync($request, $s_tel = null, $s_l1 = null, $s_l2 = null, $s_l3 = null, $s_l4 = null, $s_l5 = null, $s_l6 = null, $s_cp = null, $s_loc = null)
    {
        return $this->checkPhoneBookGetAsyncWithHttpInfo($request, $s_tel, $s_l1, $s_l2, $s_l3, $s_l4, $s_l5, $s_l6, $s_cp, $s_loc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkPhoneBookGetAsyncWithHttpInfo
     *
     * Permet d’obtenir les informations du propriétaire du numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_l1 Nom individu ou raison sociale si société. (optional)
     * @param  string $s_l2 Complément d&#39;adresse 1. (optional)
     * @param  string $s_l3 Complément d&#39;adresse 2. (optional)
     * @param  string $s_l4 Voie. (optional)
     * @param  string $s_l5 Lieu dit. (optional)
     * @param  string $s_l6 Code postal et localité. (optional)
     * @param  string $s_cp Code postal de l&#39;adresse. (optional)
     * @param  string $s_loc Localité de l&#39;adresse. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkPhoneBookGetAsyncWithHttpInfo($request, $s_tel = null, $s_l1 = null, $s_l2 = null, $s_l3 = null, $s_l4 = null, $s_l5 = null, $s_l6 = null, $s_cp = null, $s_loc = null)
    {
        $returnType = '\CapAddress\Phone\Model\CheckPhoneBookResponse';
        $request = $this->checkPhoneBookGetRequest($request, $s_tel, $s_l1, $s_l2, $s_l3, $s_l4, $s_l5, $s_l6, $s_cp, $s_loc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkPhoneBookGet'
     *
     * @param  string $request (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_l1 Nom individu ou raison sociale si société. (optional)
     * @param  string $s_l2 Complément d&#39;adresse 1. (optional)
     * @param  string $s_l3 Complément d&#39;adresse 2. (optional)
     * @param  string $s_l4 Voie. (optional)
     * @param  string $s_l5 Lieu dit. (optional)
     * @param  string $s_l6 Code postal et localité. (optional)
     * @param  string $s_cp Code postal de l&#39;adresse. (optional)
     * @param  string $s_loc Localité de l&#39;adresse. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkPhoneBookGetRequest($request, $s_tel = null, $s_l1 = null, $s_l2 = null, $s_l3 = null, $s_l4 = null, $s_l5 = null, $s_l6 = null, $s_cp = null, $s_loc = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling checkPhoneBookGet'
            );
        }

        $resourcePath = '/CheckPhoneBook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_tel !== null) {
            $queryParams['sTel'] = ObjectSerializer::toQueryValue($s_tel);
        }
        // query params
        if ($s_l1 !== null) {
            $queryParams['sL1'] = ObjectSerializer::toQueryValue($s_l1);
        }
        // query params
        if ($s_l2 !== null) {
            $queryParams['sL2'] = ObjectSerializer::toQueryValue($s_l2);
        }
        // query params
        if ($s_l3 !== null) {
            $queryParams['sL3'] = ObjectSerializer::toQueryValue($s_l3);
        }
        // query params
        if ($s_l4 !== null) {
            $queryParams['sL4'] = ObjectSerializer::toQueryValue($s_l4);
        }
        // query params
        if ($s_l5 !== null) {
            $queryParams['sL5'] = ObjectSerializer::toQueryValue($s_l5);
        }
        // query params
        if ($s_l6 !== null) {
            $queryParams['sL6'] = ObjectSerializer::toQueryValue($s_l6);
        }
        // query params
        if ($s_cp !== null) {
            $queryParams['sCp'] = ObjectSerializer::toQueryValue($s_cp);
        }
        // query params
        if ($s_loc !== null) {
            $queryParams['sLoc'] = ObjectSerializer::toQueryValue($s_loc);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInfoMobileGet
     *
     * Permet de rechercher des informations concernant un numéro de téléphone.
     *
     * @param  string $request request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (optional)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (optional)
     * @param  string $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format nationa. (optional)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Phone\Model\GetInfoMobResponse
     */
    public function getInfoMobileGet($request, $s_iso_pays, $s_tel = null, $s_indicatif_out = null, $s_indice_int = null, $i_format = null, $s_code_retour = null)
    {
        list($response) = $this->getInfoMobileGetWithHttpInfo($request, $s_iso_pays, $s_tel, $s_indicatif_out, $s_indice_int, $i_format, $s_code_retour);
        return $response;
    }

    /**
     * Operation getInfoMobileGetWithHttpInfo
     *
     * Permet de rechercher des informations concernant un numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (optional)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (optional)
     * @param  string $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format nationa. (optional)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Phone\Model\GetInfoMobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInfoMobileGetWithHttpInfo($request, $s_iso_pays, $s_tel = null, $s_indicatif_out = null, $s_indice_int = null, $i_format = null, $s_code_retour = null)
    {
        $returnType = '\CapAddress\Phone\Model\GetInfoMobResponse';
        $request = $this->getInfoMobileGetRequest($request, $s_iso_pays, $s_tel, $s_indicatif_out, $s_indice_int, $i_format, $s_code_retour);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Phone\Model\GetInfoMobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInfoMobileGetAsync
     *
     * Permet de rechercher des informations concernant un numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (optional)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (optional)
     * @param  string $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format nationa. (optional)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInfoMobileGetAsync($request, $s_iso_pays, $s_tel = null, $s_indicatif_out = null, $s_indice_int = null, $i_format = null, $s_code_retour = null)
    {
        return $this->getInfoMobileGetAsyncWithHttpInfo($request, $s_iso_pays, $s_tel, $s_indicatif_out, $s_indice_int, $i_format, $s_code_retour)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInfoMobileGetAsyncWithHttpInfo
     *
     * Permet de rechercher des informations concernant un numéro de téléphone.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (optional)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (optional)
     * @param  string $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format nationa. (optional)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInfoMobileGetAsyncWithHttpInfo($request, $s_iso_pays, $s_tel = null, $s_indicatif_out = null, $s_indice_int = null, $i_format = null, $s_code_retour = null)
    {
        $returnType = '\CapAddress\Phone\Model\GetInfoMobResponse';
        $request = $this->getInfoMobileGetRequest($request, $s_iso_pays, $s_tel, $s_indicatif_out, $s_indice_int, $i_format, $s_code_retour);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInfoMobileGet'
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à rechercher. (optional)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (optional)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (optional)
     * @param  string $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format nationa. (optional)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInfoMobileGetRequest($request, $s_iso_pays, $s_tel = null, $s_indicatif_out = null, $s_indice_int = null, $i_format = null, $s_code_retour = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling getInfoMobileGet'
            );
        }
        // verify the required parameter 's_iso_pays' is set
        if ($s_iso_pays === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_iso_pays when calling getInfoMobileGet'
            );
        }

        $resourcePath = '/GetInfoMobile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_tel !== null) {
            $queryParams['sTel'] = ObjectSerializer::toQueryValue($s_tel);
        }
        // query params
        if ($s_indicatif_out !== null) {
            $queryParams['sIndicatifOut'] = ObjectSerializer::toQueryValue($s_indicatif_out);
        }
        // query params
        if ($s_iso_pays !== null) {
            $queryParams['sIsoPays'] = ObjectSerializer::toQueryValue($s_iso_pays);
        }
        // query params
        if ($s_indice_int !== null) {
            $queryParams['sIndiceInt'] = ObjectSerializer::toQueryValue($s_indice_int);
        }
        // query params
        if ($i_format !== null) {
            $queryParams['iFormat'] = ObjectSerializer::toQueryValue($i_format);
        }
        // query params
        if ($s_code_retour !== null) {
            $queryParams['sCodeRetour'] = ObjectSerializer::toQueryValue($s_code_retour);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMessageCPGet
     *
     * Gestion des messages
     *
     * @param  string $request request (required)
     * @param  string $s_code_pays_iso3 Code Iso 3 de la langue de message (défaut: FRA). (required)
     * @param  int $i_return_value Chaîne de caractères représentant le code ISO 639-1 identifiant la langue dans laquelle renvoyer les messages. (required)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Phone\Model\InlineResponse200
     */
    public function getMessageCPGet($request, $s_code_pays_iso3, $i_return_value)
    {
        list($response) = $this->getMessageCPGetWithHttpInfo($request, $s_code_pays_iso3, $i_return_value);
        return $response;
    }

    /**
     * Operation getMessageCPGetWithHttpInfo
     *
     * Gestion des messages
     *
     * @param  string $request (required)
     * @param  string $s_code_pays_iso3 Code Iso 3 de la langue de message (défaut: FRA). (required)
     * @param  int $i_return_value Chaîne de caractères représentant le code ISO 639-1 identifiant la langue dans laquelle renvoyer les messages. (required)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Phone\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMessageCPGetWithHttpInfo($request, $s_code_pays_iso3, $i_return_value)
    {
        $returnType = '\CapAddress\Phone\Model\InlineResponse200';
        $request = $this->getMessageCPGetRequest($request, $s_code_pays_iso3, $i_return_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Phone\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMessageCPGetAsync
     *
     * Gestion des messages
     *
     * @param  string $request (required)
     * @param  string $s_code_pays_iso3 Code Iso 3 de la langue de message (défaut: FRA). (required)
     * @param  int $i_return_value Chaîne de caractères représentant le code ISO 639-1 identifiant la langue dans laquelle renvoyer les messages. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageCPGetAsync($request, $s_code_pays_iso3, $i_return_value)
    {
        return $this->getMessageCPGetAsyncWithHttpInfo($request, $s_code_pays_iso3, $i_return_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMessageCPGetAsyncWithHttpInfo
     *
     * Gestion des messages
     *
     * @param  string $request (required)
     * @param  string $s_code_pays_iso3 Code Iso 3 de la langue de message (défaut: FRA). (required)
     * @param  int $i_return_value Chaîne de caractères représentant le code ISO 639-1 identifiant la langue dans laquelle renvoyer les messages. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMessageCPGetAsyncWithHttpInfo($request, $s_code_pays_iso3, $i_return_value)
    {
        $returnType = '\CapAddress\Phone\Model\InlineResponse200';
        $request = $this->getMessageCPGetRequest($request, $s_code_pays_iso3, $i_return_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMessageCPGet'
     *
     * @param  string $request (required)
     * @param  string $s_code_pays_iso3 Code Iso 3 de la langue de message (défaut: FRA). (required)
     * @param  int $i_return_value Chaîne de caractères représentant le code ISO 639-1 identifiant la langue dans laquelle renvoyer les messages. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMessageCPGetRequest($request, $s_code_pays_iso3, $i_return_value)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling getMessageCPGet'
            );
        }
        // verify the required parameter 's_code_pays_iso3' is set
        if ($s_code_pays_iso3 === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_code_pays_iso3 when calling getMessageCPGet'
            );
        }
        // verify the required parameter 'i_return_value' is set
        if ($i_return_value === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $i_return_value when calling getMessageCPGet'
            );
        }

        $resourcePath = '/GetMessageCP';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_code_pays_iso3 !== null) {
            $queryParams['sCodePaysIso3'] = ObjectSerializer::toQueryValue($s_code_pays_iso3);
        }
        // query params
        if ($i_return_value !== null) {
            $queryParams['iReturnValue'] = ObjectSerializer::toQueryValue($i_return_value);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPhoneGet
     *
     * Permet de valider la syntaxe d'un numéro de téléphone d'un pays.
     *
     * @param  string $request request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_caractere_sep Caractère représentant le séparateur à inclure entre les chiffres du numéro de téléphone. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. (required)
     * @param  int $i_type_search Entier représentant le type de recherche. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Phone\Model\SearchPhoneResponse
     */
    public function searchPhoneGet($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel = null)
    {
        list($response) = $this->searchPhoneGetWithHttpInfo($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel);
        return $response;
    }

    /**
     * Operation searchPhoneGetWithHttpInfo
     *
     * Permet de valider la syntaxe d'un numéro de téléphone d'un pays.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_caractere_sep Caractère représentant le séparateur à inclure entre les chiffres du numéro de téléphone. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. (required)
     * @param  int $i_type_search Entier représentant le type de recherche. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Phone\Model\SearchPhoneResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPhoneGetWithHttpInfo($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel = null)
    {
        $returnType = '\CapAddress\Phone\Model\SearchPhoneResponse';
        $request = $this->searchPhoneGetRequest($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Phone\Model\SearchPhoneResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPhoneGetAsync
     *
     * Permet de valider la syntaxe d'un numéro de téléphone d'un pays.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_caractere_sep Caractère représentant le séparateur à inclure entre les chiffres du numéro de téléphone. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. (required)
     * @param  int $i_type_search Entier représentant le type de recherche. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPhoneGetAsync($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel = null)
    {
        return $this->searchPhoneGetAsyncWithHttpInfo($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPhoneGetAsyncWithHttpInfo
     *
     * Permet de valider la syntaxe d'un numéro de téléphone d'un pays.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_caractere_sep Caractère représentant le séparateur à inclure entre les chiffres du numéro de téléphone. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. (required)
     * @param  int $i_type_search Entier représentant le type de recherche. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPhoneGetAsyncWithHttpInfo($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel = null)
    {
        $returnType = '\CapAddress\Phone\Model\SearchPhoneResponse';
        $request = $this->searchPhoneGetRequest($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPhoneGet'
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (voir annexe pour la liste des codes pays). (required)
     * @param  string $s_caractere_sep Caractère représentant le séparateur à inclure entre les chiffres du numéro de téléphone. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. (required)
     * @param  int $i_type_search Entier représentant le type de recherche. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPhoneGetRequest($request, $s_iso_pays, $s_caractere_sep, $i_format, $i_type_search, $s_tel = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling searchPhoneGet'
            );
        }
        // verify the required parameter 's_iso_pays' is set
        if ($s_iso_pays === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_iso_pays when calling searchPhoneGet'
            );
        }
        // verify the required parameter 's_caractere_sep' is set
        if ($s_caractere_sep === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_caractere_sep when calling searchPhoneGet'
            );
        }
        // verify the required parameter 'i_format' is set
        if ($i_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $i_format when calling searchPhoneGet'
            );
        }
        // verify the required parameter 'i_type_search' is set
        if ($i_type_search === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $i_type_search when calling searchPhoneGet'
            );
        }

        $resourcePath = '/SearchPhone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_tel !== null) {
            $queryParams['sTel'] = ObjectSerializer::toQueryValue($s_tel);
        }
        // query params
        if ($s_iso_pays !== null) {
            $queryParams['sIsoPays'] = ObjectSerializer::toQueryValue($s_iso_pays);
        }
        // query params
        if ($s_caractere_sep !== null) {
            $queryParams['sCaractereSep'] = ObjectSerializer::toQueryValue($s_caractere_sep);
        }
        // query params
        if ($i_format !== null) {
            $queryParams['iFormat'] = ObjectSerializer::toQueryValue($i_format);
        }
        // query params
        if ($i_type_search !== null) {
            $queryParams['iTypeSearch'] = ObjectSerializer::toQueryValue($i_type_search);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validatePhoneMobGet
     *
     * Permet de valider l'existence d'un numéro de téléphone mobile français.
     *
     * @param  string $request request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (required)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (required)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format national. (required)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CapAddress\Phone\Model\ValidatePhoneMobResponse
     */
    public function validatePhoneMobGet($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel = null)
    {
        list($response) = $this->validatePhoneMobGetWithHttpInfo($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel);
        return $response;
    }

    /**
     * Operation validatePhoneMobGetWithHttpInfo
     *
     * Permet de valider l'existence d'un numéro de téléphone mobile français.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (required)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (required)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format national. (required)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \CapAddress\Phone\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CapAddress\Phone\Model\ValidatePhoneMobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePhoneMobGetWithHttpInfo($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel = null)
    {
        $returnType = '\CapAddress\Phone\Model\ValidatePhoneMobResponse';
        $request = $this->validatePhoneMobGetRequest($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CapAddress\Phone\Model\ValidatePhoneMobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validatePhoneMobGetAsync
     *
     * Permet de valider l'existence d'un numéro de téléphone mobile français.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (required)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (required)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format national. (required)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePhoneMobGetAsync($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel = null)
    {
        return $this->validatePhoneMobGetAsyncWithHttpInfo($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validatePhoneMobGetAsyncWithHttpInfo
     *
     * Permet de valider l'existence d'un numéro de téléphone mobile français.
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (required)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (required)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format national. (required)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePhoneMobGetAsyncWithHttpInfo($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel = null)
    {
        $returnType = '\CapAddress\Phone\Model\ValidatePhoneMobResponse';
        $request = $this->validatePhoneMobGetRequest($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validatePhoneMobGet'
     *
     * @param  string $request (required)
     * @param  string $s_iso_pays Chaîne de caractères représentant le code ISO3 du pays. (required)
     * @param  string $s_indice_int Chaîne de caractères représentant l&#39;indice téléphonique national. (required)
     * @param  string $s_indicatif_out Chaîne de caractères représentant l&#39;indicatif international. (required)
     * @param  int $i_format Entier représentant le type de format à afficher. 1 pour format international, ou 0 pour format national. (required)
     * @param  string $s_code_retour Code retour résultant de la fonction SearchPhone. (required)
     * @param  string $s_tel Chaîne de caractères représentant le numéro de téléphone à valider. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validatePhoneMobGetRequest($request, $s_iso_pays, $s_indice_int, $s_indicatif_out, $i_format, $s_code_retour, $s_tel = null)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling validatePhoneMobGet'
            );
        }
        // verify the required parameter 's_iso_pays' is set
        if ($s_iso_pays === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_iso_pays when calling validatePhoneMobGet'
            );
        }
        // verify the required parameter 's_indice_int' is set
        if ($s_indice_int === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_indice_int when calling validatePhoneMobGet'
            );
        }
        // verify the required parameter 's_indicatif_out' is set
        if ($s_indicatif_out === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_indicatif_out when calling validatePhoneMobGet'
            );
        }
        // verify the required parameter 'i_format' is set
        if ($i_format === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $i_format when calling validatePhoneMobGet'
            );
        }
        // verify the required parameter 's_code_retour' is set
        if ($s_code_retour === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $s_code_retour when calling validatePhoneMobGet'
            );
        }

        $resourcePath = '/ValidatePhoneMob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request !== null) {
            $queryParams['request'] = ObjectSerializer::toQueryValue($request);
        }
        // query params
        if ($s_tel !== null) {
            $queryParams['sTel'] = ObjectSerializer::toQueryValue($s_tel);
        }
        // query params
        if ($s_iso_pays !== null) {
            $queryParams['sIsoPays'] = ObjectSerializer::toQueryValue($s_iso_pays);
        }
        // query params
        if ($s_indice_int !== null) {
            $queryParams['sIndiceInt'] = ObjectSerializer::toQueryValue($s_indice_int);
        }
        // query params
        if ($s_indicatif_out !== null) {
            $queryParams['sIndicatifOut'] = ObjectSerializer::toQueryValue($s_indicatif_out);
        }
        // query params
        if ($i_format !== null) {
            $queryParams['iFormat'] = ObjectSerializer::toQueryValue($i_format);
        }
        // query params
        if ($s_code_retour !== null) {
            $queryParams['sCodeRetour'] = ObjectSerializer::toQueryValue($s_code_retour);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
